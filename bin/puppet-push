#!/bin/bash

# Copyright (C) 2012  Tomas Edwardsson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [ -f /etc/puppet-push.conf ]; then
	. /etc/puppet-push.conf
fi

verbose=${VERBOSE-0}
PATH=/usr/libexec/puppet-push:/bin:/usr/bin
PUPPET_PUSH_BASE="/var/lib/puppet-push"

PUPPET_VAR_DIR=${PUPPET_VAR_DIR-/var/lib/puppet}
REMOTE_SSH_USER=${REMOTE_SSH_USER-root}
PUPPET_MODULE_DIR=${PUPPET_MODULE_DIR-/etc/puppet/modules/production}

# We need to export this so the python file extracter can read it
export PUPPET_MODULE_DIR

# Different site manifest (for clientbucket)
PUSH_SITE_MANIFEST=${PUSH_SITE_MANIFEST-/etc/puppet/manifests/site-push.pp}

# Logging Functions #
function info() {
	[ $verbose -gt 0 ] || return 0
	local msg=$1
	echo -e "\e[00;32m${msg}\e[00m"
}

function warning() {
	local msg=$1
	echo -e "\e[01;33m${msg}\e[00m"
}
# /Logging Functions#

TARGET=$1

# Shift the target off argv
shift

if [ ! -z $1 ] && [ $1 == "--environment" ]; then
	shift
	if [ -z $1 ]; then
		warning 'No environment supplied!'
		exit 1
	fi
	PUPPET_ENVIRONMENT=$1
	shift
fi

PUPPET_ARGS="$@"

if [ -z "${TARGET}" ]; then
	echo "Usage $0 <hostname>" 1>&2
	exit 1
fi


# Setup necesary dirs
function setup() {
	if [ ! -e "${PUPPET_PUSH_BASE}/pending" ]; then
		mkdir -p "${PUPPET_PUSH_BASE}/pending"
	fi
}

# Toss temporary files
function cleanup() {
	info 'Cleaning up'
	rm -f "${PUPPET_PUSH_BASE}/pending/${TARGET}.yaml"
	rm -f "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat"
	rm -f "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat.doctored"
}

# Print message and exit
function kickthebucket() {
	local errormsg=$1

	cleanup
	echo -e "Fatal: \e[00;31m${errormsg}\e[00m" 1>&2
	exit 1
}


# Generates facts on ${TARGET} and copies them to puppet master
function sync_fact() {
	info 'Syncing Fact'

	# Change the environment
	if [ ! -z ${PUPPET_ENVIRONMENT} ]; then
		info "Forcing environment to ${PUPPET_ENVIRONMENT}"
		local ENVIRONMENT_ARGS="--environment ${PUPPET_ENVIRONMENT}"
	fi

	ssh ${REMOTE_SSH_USER}@${TARGET} "mkdir -p ${PUPPET_PUSH_BASE};puppet facts find x --render-as yaml ${ENVIRONMENT_ARGS}" > "${PUPPET_PUSH_BASE}/pending/${TARGET}.yaml"

	# Find the FQDN in the fact file
	fact_fqdn=$(awk '$1 == "fqdn:" { print $2}' "${PUPPET_PUSH_BASE}/pending/${TARGET}.yaml")

	if [ "${fact_fqdn}" != "${TARGET}" ]; then
		kickthebucket "Please specify the hosts FQDN, ${fact_fqdn} != ${TARGET}" 
	fi

	# Apparently we need to delete the node yaml file so it re-evaluates it's environment
	rm "${PUPPET_VAR_DIR}/yaml/node/${TARGET}.yaml"

	# Move the facts to the central puppet location
	mv "${PUPPET_PUSH_BASE}/pending/${TARGET}.yaml" "${PUPPET_VAR_DIR}/yaml/facts/${TARGET}.yaml" \
		||Â kickthebucket "Unable to copy facts for node ${TARGET} to puppet directory"

	# Perms are important
	chown puppet:puppet "${PUPPET_VAR_DIR}/yaml/facts/${TARGET}.yaml"
	chmod 640 "${PUPPET_VAR_DIR}/yaml/facts/${TARGET}.yaml"
}
 

# Generates a catalog on the puppet master
function compile_catalog() {
	info "Compiling catalog"
	local EXTRA_ARGS=""
	if [ -n "${PUSH_SITE_MANIFEST}" ]; then
		EXTRA_ARGS=" --manifest ${PUSH_SITE_MANIFEST}"
	fi

	# Change the environment
	if [ ! -z ${PUPPET_ENVIRONMENT} ]; then
		info "Forcing environment to ${PUPPET_ENVIRONMENT}"
		local EXTRA_ARGS=" --environment ${PUPPET_ENVIRONMENT}"
	fi

	# Change the environment
	if [ ! -z ${PUPPET_CONF_DIR} ]; then
		info "Forcing confdir to ${PUPPET_CONF_DIR}"
		local EXTRA_ARGS=" --confdir ${PUPPET_CONF_DIR}"
	fi

	COMPILELOG=$(mktemp '/tmp/puppet-push-compile.XXXXXXXX')
	trap "rm -f ${COMPILELOG}" EXIT

	puppet master --compile ${TARGET} -l ${COMPILELOG} ${EXTRA_ARGS} > "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat" || kickthebucket "Unable to compile catalog for ${TARGET}"

	# If we have any problems 
	egrep '^\[.;..m(fail|warning|err|crit|alert)' "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat" > /dev/null
	if [ "$?" == "0" ]; then
		warning "Problems in compiling catalog"
		cat ${COMPILELOG}
	elif [ $verbose -gt 0 ]; then
		egrep '^' "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat"
	fi
	
	# Remove messages from the catalog
	sed -i '/^/d' "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat"
}


# Pushes files from the File[] resource which use "source =>"
# Only copies relevant files extracted from catalog
function push_files() {
	info "Pushing module files"
	local FILESOURCES=$(extract-file-sources.py ${TARGET})
	if [ -n "${FILESOURCES}" ]; then
		cd ${PUPPET_MODULE_DIR} || kickthebucket "Unable to enter puppet modules dir ${PUPPET_MODULE_DIR}"
		rsync -a -R --delete ${FILESOURCES} ${REMOTE_SSH_USER}@${TARGET}:${PUPPET_PUSH_BASE}/modules/ || \
			kickthebucket "problems rsync'ing files"
		cd /
	else
		info "...No module files"
	fi
}


# Modify puppet:/// paths to local /opt/puppet-push/modules path
function doctor_catalog() {
	info "Doctoring catalog replacing puppet:/// to local paths"
	cat "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat" | perl -pe "s|puppet:///modules/(.+?)/(.+)$|${PUPPET_PUSH_BASE}/modules/\$1/files/\$2|" \
		> "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat.doctored"
}

# Pushes the catalog to the ${TARGET}
function push_catalog() {
	info "Pushing catalog to ${TARGET}"
	rsync "${PUPPET_PUSH_BASE}/pending/${TARGET}.cat.doctored" ${REMOTE_SSH_USER}@${TARGET}:${PUPPET_PUSH_BASE}/catalog || \
		kickthebucket "Unable to push new catalog to ${TARGET}"
}


# Syncs local /var/lib/puppet/lib to remote /var/lib/puppet/lib (pluginsync)
function pluginsync() {
	info "Plugin sync from ${PUPPET_VAR_DIR}/lib to ${TARGET}:${PUPPET_VAR_DIR}/lib"
	rsync -a "${PUPPET_VAR_DIR}/lib" "${PUPPET_VAR_DIR}/" || \
		kickthebucket "Unable to pluginsync ${PUPPET_VAR_DIR}/lib"
}

# Runs the actual "puppet apply" on ${TARGET}
function applycatalog() {
	info "Applying catalog on ${TARGET}"

	APPLYLOG=$(mktemp '/tmp/puppet-push-apply.XXXXXXXX')
	trap "rm -f ${APPLYLOG}" EXIT
	ssh ${REMOTE_SSH_USER}@${TARGET} "puppet apply --catalog ${PUPPET_PUSH_BASE}/catalog ${PUPPET_ARGS}" \
		&> ${APPLYLOG}

	egrep '^\[.;..m(fail|warning|err|crit|alert)' "${APPLYLOG}" > /dev/null
	if [ "$?" == "0" ]; then
		warning "Problems in applying catalog"
		cat ${APPLYLOG}
	elif [ $verbose -gt 0 ]; then
		cat ${APPLYLOG}
	fi
}

function check_sshkey() {
	info "Checking availability of ssh keys"
	ls ${HOME}/.ssh/id_?sa &> /dev/null || kickthebucket "No ssh keys in ${HOME}/.ssh"
}
function check_sshkey_access() {
	info "Trying PubKeyAuth with ssh key"
	ssh -o PasswordAuthentication=no ${REMOTE_SSH_USER}@${TARGET} "/bin/true"
	if [ $? -gt 0 ]; then
		warning "SSH PubKeyAuthentication not enabled, attempting to copy keys"
		ssh-copy-id ${REMOTE_SSH_USER}@${TARGET} || kickthebucket "Unable to copy keys"
	fi
}

verlte() {
    [  "$1" = "$(echo -e "$1\n$2" | sort -V | head -n1)" ]
}

verlt() {
    [ "$1" = "$2" ] && return 1 || verlte $1 $2
}

function check_puppet() {
	info "Checking puppet installation"
	local puppet_version=$(puppet --version || kickthebucket "Puppet not installed?")
	info "Puppet ${puppet_version}"
	verlt 2.7.0 ${puppet_version} || kickthebucket "You need at least puppet version 2.7.0, you have ${puppet_version}"
}

function check_remote_puppet() {
	info "Checking remote puppet installation"
	local puppet_version=$(ssh -o PasswordAuthentication=no ${REMOTE_SSH_USER}@${TARGET} "puppet --version" || kickthebucket "Puppet not installed?")
	info "Remote puppet ${puppet_version}"
	verlt 2.7.0 ${puppet_version} || kickthebucket "You need at least puppet version 2.7.0, you have ${puppet_version}"
}
function check_remote_rsync() {
	info "Checking remote rsync installation"
	ssh -o PasswordAuthentication=no ${REMOTE_SSH_USER}@${TARGET} "which rsync" > /dev/null || kickthebucket "Rsync not installed?"
}

setup
check_puppet
check_sshkey
check_sshkey_access
check_remote_puppet
check_remote_rsync
sync_fact
compile_catalog
push_files
doctor_catalog
push_catalog
pluginsync
applycatalog
cleanup

exit 0

